"use strict";

module.exports = function (_ref) {
  var t = _ref.types;
  return {
    visitor: {
      Program: function Program(programPath, state) {
        // Get user configs
        var _state$opts = state.opts,
            _state$opts$customPro = _state$opts.customProperty,
            customProperty = _state$opts$customPro === void 0 ? "data-id" : _state$opts$customPro,
            _state$opts$slashChar = _state$opts.slashChar,
            slashChar = _state$opts$slashChar === void 0 ? "/" : _state$opts$slashChar,
            _state$opts$dirLevel = _state$opts.dirLevel,
            dirLevel = _state$opts$dirLevel === void 0 ? 1 : _state$opts$dirLevel;
        var filename = state.file.opts.filename;
        var splits = filename.split(slashChar);

        if (!splits || !splits.length) {
          console.error("babel-plugin-react-generate-property plugin error: File path is not valid. If you are on Windows, you might need to specify backslash as slashChar in options.");
          return;
        }

        var dirNames = splits.slice(-1 - dirLevel, -1);
        var fileName = splits[splits.length - 1].split(".")[0];
        var fileIdentifier = "".concat(dirNames.join("_"), "_").concat(fileName);
        programPath.traverse({
          JSXElement: function JSXElement(jsxPath) {
            var nodeName = "",
                dataIDDefined = false; // Traverse once to get the element node name (div, Header, span, etc)

            jsxPath.traverse({
              JSXOpeningElement: function JSXOpeningElement(openingPath) {
                openingPath.stop(); // Do not visit child nodes again

                var identifierNode = openingPath.get("name").node;
                nodeName = identifierNode.name;
                openingPath.traverse({
                  JSXAttribute: function JSXAttribute(attributePath) {
                    // If the data attribute doesn't exist, then we append the data attribute
                    var attributeName = attributePath.get("name").node.name;

                    if (!dataIDDefined) {
                      dataIDDefined = attributeName === customProperty;
                    }
                  }
                });
              }
            });

            if (!dataIDDefined && nodeName && nodeName !== 'Fragment') {
              jsxPath.node.openingElement.attributes.push(t.jSXAttribute(t.jSXIdentifier(customProperty), t.stringLiteral("".concat(fileIdentifier, "_").concat(nodeName))));
            }
          }
        });
      }
    }
  };
};